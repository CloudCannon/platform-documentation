_schema: default
key_name: _inputs.[*].type
key_singular_name: type
key_value_type:
  - String
key_description: >-
  This key changes the type of editing interface used for an input. Each input
  has a different appearance and functionality, processes and accepts different
  types of values, and has different configuration options.


  Value can be one of the following: `auto`, `checkbox`, `switch`, `code`,
  `color`, `datetime`, `date`, `time`, `file`, `document`, `image`, `number`,
  `range`, `object`, `array`, `select`, `multiselect`, `choice`, `multichoice`,
  `text`, `textarea`, `email`, `html`, `markdown`, or `url`.


  If the type or value of an input is misconfigured, CloudCannon will display an
  orange warning instead of an input. If type is not configured for an input,
  CloudCannon will attempt to determine input type based on value or key name
  conventions.


  This key has no default.


  <comp.Example>
    In this example, we have configured the `page_description` input as a markdown Rich Text Input using the `type` key.
  
    <comp.MultiCodeBlock language="YAML" translate_into={["json"]} source="cloudcannon.config.yml">
    ``````````
    _inputs:
      page_description:
        type: markdown
        options:
          show_count: true
  
    ``````````
    </comp.MultiCodeBlock>
  
    In this example, we have configured the `related_links` input as a URL Input using the `type` key.

    <comp.MultiCodeBlock language="YAML" translate_into={["json"]} source="cloudcannon.config.yml">
    ``````````
    _inputs:
      related_links:
        type: url
        comment: Reference a different page
  
    ``````````
    </comp.MultiCodeBlock>
  
  </comp.Example>
key_documentation:
  text: inputs
  url: /documentation/articles/what-are-inputs/
parent_keys:
  - _inputs
subkeys:
